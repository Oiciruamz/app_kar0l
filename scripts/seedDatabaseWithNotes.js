// Script para poblar la base de datos con datos de prueba incluyendo appointmentNotes
const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// Cargar la clave de servicio
const serviceAccountPath = path.join(__dirname, '../serviceAccountKey.json');

if (!fs.existsSync(serviceAccountPath)) {
  console.error('‚ùå Error: No se encontr√≥ serviceAccountKey.json');
  console.error('Por favor descarga la clave de servicio desde Firebase Console y col√≥cala en la ra√≠z del proyecto');
  process.exit(1);
}

const serviceAccount = require(serviceAccountPath);

// Inicializar Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: `https://${serviceAccount.project_id}.firebaseio.com`
});

const db = admin.firestore();

// Datos de doctores
const doctors = [
  {
    email: 'dr.garcia@clinica.com',
    password: 'Doctor123!',
    displayName: 'Dr. Carlos Garc√≠a',
    phone: '8112345601',
    specialty: 'Odontolog√≠a General',
    bio: 'Especialista en odontolog√≠a general con m√°s de 10 a√±os de experiencia.',
    photoURL: 'https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?w=150&h=150&fit=crop&crop=face'
  },
  {
    email: 'dra.martinez@clinica.com',
    password: 'Doctor123!',
    displayName: 'Dra. Ana Mart√≠nez',
    phone: '8112345602',
    specialty: 'Ortodoncia',
    bio: 'Especialista en ortodoncia y correcci√≥n de mordidas.',
    photoURL: 'https://images.unsplash.com/photo-1594824388852-7b1b0b5f8b8c?w=150&h=150&fit=crop&crop=face'
  },
  {
    email: 'dr.lopez@clinica.com',
    password: 'Doctor123!',
    displayName: 'Dr. Miguel L√≥pez',
    phone: '8112345603',
    specialty: 'Endodoncia',
    bio: 'Especialista en tratamientos de conducto y endodoncia.',
    photoURL: 'https://images.unsplash.com/photo-1582750433449-648ed127bb54?w=150&h=150&fit=crop&crop=face'
  },
  {
    email: 'dra.rodriguez@clinica.com',
    password: 'Doctor123!',
    displayName: 'Dra. Mar√≠a Rodr√≠guez',
    phone: '8112345604',
    specialty: 'Periodoncia',
    bio: 'Especialista en enfermedades de las enc√≠as y periodoncia.',
    photoURL: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=150&h=150&fit=crop&crop=face'
  },
  {
    email: 'dr.hernandez@clinica.com',
    password: 'Doctor123!',
    displayName: 'Dr. Roberto Hern√°ndez',
    phone: '8112345605',
    specialty: 'Cirug√≠a Maxilofacial',
    bio: 'Especialista en cirug√≠a oral y maxilofacial.',
    photoURL: 'https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?w=150&h=150&fit=crop&crop=face'
  },
  {
    email: 'dra.torres@clinica.com',
    password: 'Doctor123!',
    displayName: 'Dra. Laura Torres',
    phone: '8112345606',
    specialty: 'Odontopediatr√≠a',
    bio: 'Especialista en odontolog√≠a infantil.',
    photoURL: 'https://images.unsplash.com/photo-1594824388852-7b1b0b5f8b8c?w=150&h=150&fit=crop&crop=face'
  }
];

// Datos de pacientes
const patients = [
  {
    email: 'paciente1@email.com',
    password: 'Paciente123!',
    displayName: 'Miguel P√©rez',
    phone: '8112345671'
  },
  {
    email: 'paciente2@email.com',
    password: 'Paciente123!',
    displayName: 'Sofia Gonz√°lez',
    phone: '8112345672'
  },
  {
    email: 'paciente3@email.com',
    password: 'Paciente123!',
    displayName: 'Daniel Ram√≠rez',
    phone: '8112345673'
  },
  {
    email: 'paciente4@email.com',
    password: 'Paciente123!',
    displayName: 'Carmen Flores',
    phone: '8112345674'
  },
  {
    email: 'paciente5@email.com',
    password: 'Paciente123!',
    displayName: 'Fernando Morales',
    phone: '8112345675'
  }
];

// Razones comunes para citas
const appointmentReasons = [
  'Limpieza dental',
  'Revisi√≥n general',
  'Dolor de muela',
  'Ajuste de brackets',
  'Blanqueamiento dental',
  'Extracci√≥n de muela del juicio',
  'Tratamiento de conducto',
  'Colocaci√≥n de implante',
  'Revisi√≥n de ortodoncia',
  'Consulta inicial',
  'Emergencia dental',
  'Sensibilidad dental',
  'Caries dental',
  'Problemas de enc√≠as'
];

// Diagn√≥sticos comunes
const diagnoses = [
  'Caries en muela 16',
  'Gingivitis leve',
  'Necesita limpieza profunda',
  'Problema de mordida',
  'Sensibilidad dental',
  'Caries m√∫ltiples',
  'Problema de enc√≠as',
  'Necesita ortodoncia',
  'Muela del juicio impactada',
  'Necesita endodoncia'
];

// Tratamientos comunes
const treatments = [
  'Limpieza dental',
  'Empaste simple',
  'Endodoncia',
  'Extracci√≥n',
  'Ortodoncia',
  'Implante dental',
  'Corona',
  'Blanqueamiento',
  'Cirug√≠a menor',
  'Tratamiento de enc√≠as'
];

// Observaciones comunes
const observations = [
  'Paciente colaborador',
  'Necesita derivaci√≥n a especialista',
  'Seguimiento en 3 meses',
  'Mantener higiene dental',
  'Evitar alimentos duros',
  'Usar enjuague bucal',
  'Cepillado 3 veces al d√≠a',
  'Controlar az√∫cares',
  'Revisi√≥n en 6 meses',
  'Derivar a ortodoncista'
];

// Funci√≥n para crear usuarios en Firebase Auth y Firestore
async function createUser(userData, role) {
  try {
    // Verificar si el usuario ya existe
    let user;
    try {
      user = await admin.auth().getUserByEmail(userData.email);
      console.log(`‚úì Usuario ya existe: ${userData.email}`);
      return user.uid;
    } catch (error) {
      // Usuario no existe, crear uno nuevo
      user = await admin.auth().createUser({
        email: userData.email,
        password: userData.password,
        displayName: userData.displayName,
      });
      console.log(`‚úì Usuario creado: ${userData.email}`);
    }

    // Crear perfil en Firestore
    const userProfile = {
      uid: user.uid,
      email: userData.email,
      role: role,
      displayName: userData.displayName,
      phone: userData.phone,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    };

    // Agregar campos adicionales para doctores
    if (role === 'doctor') {
      userProfile.specialty = userData.specialty;
      userProfile.bio = userData.bio;
      userProfile.photoURL = userData.photoURL;
    }

    await db.collection('users').doc(user.uid).set(userProfile);
    console.log(`‚úì Perfil creado en Firestore para: ${userData.displayName}`);

    return user.uid;
  } catch (error) {
    console.error(`‚úó Error creando usuario ${userData.email}:`, error.message);
    throw error;
  }
}

// Funci√≥n para generar slots de tiempo para un doctor
async function createSlotsForDoctor(doctorId, startDate, endDate) {
  const slots = [];
  const currentDate = new Date(startDate);
  
  while (currentDate <= endDate) {
    // Solo crear slots para lunes a viernes
    const dayOfWeek = currentDate.getDay();
    if (dayOfWeek >= 1 && dayOfWeek <= 5) {
      // Crear slots de 9:00 AM a 6:00 PM, cada 30 minutos
      for (let hour = 9; hour < 18; hour++) {
        for (let minute = 0; minute < 60; minute += 30) {
          const slotRef = db.collection('slots').doc();
          const slotData = {
            id: slotRef.id,
            doctorId: doctorId,
            date: currentDate.toISOString().split('T')[0], // YYYY-MM-DD
            startTime: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,
            endTime: `${hour.toString().padStart(2, '0')}:${(minute + 30).toString().padStart(2, '0')}`,
            duration: 30,
            status: 'available',
            capacity: 1,
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
          };
          
          await slotRef.set(slotData);
          slots.push(slotRef.id);
        }
      }
    }
    
    currentDate.setDate(currentDate.getDate() + 1);
  }

  return slots;
}

// Funci√≥n para crear una cita
async function createAppointment(doctorId, doctorName, patientId, patientName, patientPhone, slot, reason) {
  const appointmentRef = db.collection('appointments').doc();
  
  const appointment = {
    doctorId: doctorId,
    doctorName: doctorName,
    patientId: patientId,
    patientName: patientName,
    patientPhone: patientPhone,
    slotId: slot.id,
    date: slot.data.date,
    startTime: slot.data.startTime,
    endTime: slot.data.endTime,
    reason: reason,
    status: 'Agendada',
    bookedBy: patientId, // Paciente agend√≥ la cita
    bookedByRole: 'patient',
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    updatedAt: admin.firestore.FieldValue.serverTimestamp()
  };

  // Crear la cita
  await appointmentRef.set(appointment);

  // Actualizar el slot para marcarlo como ocupado
  await slot.ref.update({
    status: 'booked',
    appointmentId: appointmentRef.id,
    updatedAt: admin.firestore.FieldValue.serverTimestamp()
  });

  return appointmentRef.id;
}

// Funci√≥n para crear notas m√©dicas para citas
async function createAppointmentNote(appointmentId, doctorId, patientId, diagnosis, treatment, observations) {
  const noteRef = db.collection('appointmentNotes').doc();
  
  const note = {
    id: noteRef.id,
    appointmentId: appointmentId,
    doctorId: doctorId,
    patientId: patientId,
    diagnosis: diagnosis,
    treatment: treatment,
    observations: observations,
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    updatedAt: admin.firestore.FieldValue.serverTimestamp()
  };

  await noteRef.set(note);
  return noteRef.id;
}

// Funci√≥n principal
async function seedDatabase() {
  try {
    console.log('üå± Iniciando poblamiento de la base de datos...\n');

    // 1. Crear doctores
    console.log('üë®‚Äç‚öïÔ∏è Creando doctores...');
    const doctorIds = [];
    for (const doctorData of doctors) {
      const doctorId = await createUser(doctorData, 'doctor');
      doctorIds.push(doctorId);
    }

    // 2. Crear pacientes
    console.log('\nüë§ Creando pacientes...');
    const patientIds = [];
    for (const patientData of patients) {
      const patientId = await createUser(patientData, 'patient');
      patientIds.push(patientId);
    }

    // 3. Crear slots para los pr√≥ximos 30 d√≠as
    console.log('\nüìÖ Creando horarios disponibles...');
    const startDate = new Date();
    const endDate = new Date();
    endDate.setDate(startDate.getDate() + 30);

    const allSlots = [];
    for (const doctorId of doctorIds) {
      const slots = await createSlotsForDoctor(doctorId, startDate, endDate);
      allSlots.push(...slots);
    }
    console.log(`‚úì Creados ${allSlots.length} horarios disponibles`);

    // 4. Crear algunas citas de ejemplo
    console.log('\nüìã Creando citas de ejemplo...');
    const appointments = [];
    
    // Obtener algunos slots disponibles para crear citas
    const availableSlots = await db.collection('slots')
      .where('status', '==', 'available')
      .limit(15)
      .get();

    let slotIndex = 0;
    for (let i = 0; i < Math.min(10, availableSlots.docs.length); i++) {
      const slot = availableSlots.docs[i];
      const slotData = slot.data();
      
      // Obtener informaci√≥n del doctor
      const doctorDoc = await db.collection('users').doc(slotData.doctorId).get();
      const doctorData = doctorDoc.data();
      
      // Seleccionar paciente aleatorio
      const patientId = patientIds[i % patientIds.length];
      const patientDoc = await db.collection('users').doc(patientId).get();
      const patientData = patientDoc.data();
      
      // Crear cita
      const appointmentId = await createAppointment(
        slotData.doctorId,
        doctorData.displayName,
        patientId,
        patientData.displayName,
        patientData.phone,
        slot,
        appointmentReasons[i % appointmentReasons.length]
      );
      
      appointments.push(appointmentId);
      
      // Crear nota m√©dica para algunas citas
      if (i < 5) {
        await createAppointmentNote(
          appointmentId,
          slotData.doctorId,
          patientId,
          diagnoses[i % diagnoses.length],
          treatments[i % treatments.length],
          observations[i % observations.length]
        );
        console.log(`‚úì Creada nota m√©dica para cita ${appointmentId}`);
      }
    }

    console.log(`‚úì Creadas ${appointments.length} citas de ejemplo`);

    // 5. Crear algunas notas m√©dicas adicionales para historial
    console.log('\nüìù Creando historial m√©dico adicional...');
    for (let i = 0; i < 3; i++) {
      const patientId = patientIds[i];
      const doctorId = doctorIds[i % doctorIds.length];
      
      // Crear nota de historial (sin appointmentId espec√≠fico)
      const noteRef = db.collection('appointmentNotes').doc();
      const note = {
        id: noteRef.id,
        appointmentId: null, // Nota de historial general
        doctorId: doctorId,
        patientId: patientId,
        diagnosis: diagnoses[i % diagnoses.length],
        treatment: treatments[i % treatments.length],
        observations: observations[i % observations.length],
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      };
      
      await noteRef.set(note);
      console.log(`‚úì Creada nota de historial para paciente ${patientId}`);
    }

    console.log('\nüéâ ¬°Base de datos poblada exitosamente!');
    console.log('\nüìä Resumen:');
    console.log(`   üë®‚Äç‚öïÔ∏è ${doctorIds.length} doctores`);
    console.log(`   üë§ ${patientIds.length} pacientes`);
    console.log(`   üìÖ ${allSlots.length} horarios disponibles`);
    console.log(`   üìã ${appointments.length} citas creadas`);
    console.log(`   üìù ${appointments.length + 3} notas m√©dicas`);

    console.log('\nüîë Credenciales de prueba:');
    console.log('\nüë®‚Äç‚öïÔ∏è Doctores:');
    doctors.forEach(doctor => {
      console.log(`   ${doctor.email} / ${doctor.password} (${doctor.specialty})`);
    });
    
    console.log('\nüë§ Pacientes:');
    patients.forEach(patient => {
      console.log(`   ${patient.email} / ${patient.password}`);
    });

  } catch (error) {
    console.error('‚ùå Error poblando la base de datos:', error);
  } finally {
    process.exit(0);
  }
}

// Ejecutar el script
seedDatabase();

